package com.sleepydesign.system{	import flash.display.DisplayObjectContainer;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.system.Capabilities;	import flash.text.TextField;	import flash.text.TextFormat;		public class DebugUtil	{		private static var _label:TextField;				private static var _enable:Boolean = true;				public static function get enable():Boolean		{			return _enable;		}				public static function set enable(value:Boolean):void		{			_enable = value;						if (_label)				_label.visible = value;		}				private static var _log:String = "";				public static function get log():String		{			return _log;		}				public static function set log(value:String):void		{			_log = value;						if (!_label)				return;						_label.text = _log;		}				public static function clear():void		{			_label.text = _log = "";		}				public static function trace(... args):void		{			if (_enable)			{				doTrace(args);				log += (args + "\n");								// auto scroll to bottom				if (_label)					_label.scrollV = _label.maxScrollV;			}		}				private static function get isAIRCaptiveAppMobile():Boolean		{			// Android or iPhone			return (Capabilities.os.indexOf("Linux") == 0) || (Capabilities.os.indexOf("iPhone") == 0);		}				public static function init(container:DisplayObjectContainer, x:Number = 0, y:Number = 0, alpha:Number = .5):void		{			if (!_label)			{				_label = new TextField();				//_label.autoSize = "left";				_label.cacheAsBitmap = true;				_label.wordWrap = true;				_label.multiline = true;				_label.defaultTextFormat = new TextFormat("Tahoma", 12, 0xFFFFFF);				_label.background = true;				_label.backgroundColor = 0x111111;				_label.selectable = true;				_label.mouseWheelEnabled = true;				_label.mouseEnabled = true;				_label.alpha = alpha;				//label.blendMode = BlendMode.MULTIPLY;								_label.x = x;				_label.y = y;								_label.width = isAIRCaptiveAppMobile ? container.stage.fullScreenWidth : container.stage.stageWidth;				_label.height = (isAIRCaptiveAppMobile ? container.stage.fullScreenHeight : container.stage.stageHeight) * .25;								const begPoint:Point = new Point();								const onMouseDown:Function = function(event:MouseEvent):void				{					container.stage.addEventListener(Event.MOUSE_LEAVE, onMouseLeave);					container.stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);					container.stage.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);										begPoint.y = event.localY;				};								const onMouseUp:Function = function(event:Event):void				{					container.stage.removeEventListener(Event.MOUSE_LEAVE, onMouseLeave);					container.stage.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);					container.stage.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);				};								const onMouseLeave:Function = onMouseUp;								const onMouseMove:Function = function(event:MouseEvent):void				{					const nextY:Number = container.stage.mouseY - begPoint.y;					if (nextY >= 0 && nextY < container.stage.stageHeight - _label.height)						_label.y = nextY;				};								_label.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);								enable = true;			}			else			{				if (_label.parent)					_label.parent.removeChild(_label);			}						container.addChild(_label);						_label.text = _log;		}	}}function doTrace(... args):void{	trace.apply(this, args);}